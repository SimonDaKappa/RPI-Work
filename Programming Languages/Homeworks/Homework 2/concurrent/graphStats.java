package concurrent;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.util.*;
import java.io.*;

public class graphStats extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		graphStats instance = (graphStats)new graphStats(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new graphStats(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return graphStats.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new graphStats(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return graphStats.getReferenceByLocation(new UAL(ual)); }
	public graphStats(boolean o, UAN __uan)	{ super(false,__uan); }
	public graphStats(boolean o, UAL __ual)	{ super(false,__ual); }
	public graphStats(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public graphStats(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public graphStats(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public graphStats()		{  }
	public graphStats(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "concurrent.graphStats", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public graphStats self;
		public void updateSelf(ActorReference actorReference) {
			((graphStats)actorReference).setUAL(getUAL());
			((graphStats)actorReference).setUAN(getUAN());
			self = new graphStats(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "concurrent.graphStats$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		Integer numPartitions;
		Integer[][] nodes;
		String[][] colors;
		Integer[][] edge_sources;
		Integer[][] edge_destinations;
		worker[] w;
		public void act(String[] arg) {
			String input = arg[0];
			String path_a = arg[1];
			String path_b = arg[2];
			int numPartitions = countPartitions(input);
			{
				// standardOutput<-println("Num partitions: "+numPartitions)
				{
					Object _arguments[] = { "Num partitions: "+numPartitions };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
			nodes = new Integer[numPartitions][];
			colors = new String[numPartitions][];
			edge_sources = new Integer[numPartitions][];
			edge_destinations = new Integer[numPartitions][];
			w = new worker[numPartitions];
			try {
				BufferedReader in = new BufferedReader(new FileReader(input));
				for (int i = 0; i<numPartitions; i++){
					String line = in.readLine();
					StringTokenizer st = new StringTokenizer(line, " ");
					st.nextToken();
					Integer worker_id = Integer.parseInt(st.nextToken());
					line = in.readLine();
					st = new StringTokenizer(line, ",");
					nodes[i] = new Integer[st.countTokens()];
					for (int j = 0; j<nodes[i].length; j++){
						nodes[i][j] = Integer.parseInt(st.nextToken());
					}
					line = in.readLine();
					st = new StringTokenizer(line, ",");
					colors[i] = new String[st.countTokens()];
					for (int j = 0; j<colors[i].length; j++){
						colors[i][j] = st.nextToken();
					}
					line = in.readLine();
					st = new StringTokenizer(line, " ");
					edge_sources[i] = new Integer[st.countTokens()];
					edge_destinations[i] = new Integer[st.countTokens()];
					for (int j = 0; j<edge_sources[i].length; j++){
						StringTokenizer st2 = new StringTokenizer(st.nextToken(), ",");
						edge_sources[i][j] = Integer.parseInt(st2.nextToken());
						edge_destinations[i][j] = Integer.parseInt(st2.nextToken());
					}
					w[i] = ((worker)new worker(this).construct());
				}
				in.close();
				{
					Token token_3_0 = new Token();
					// join block
					token_3_0.setJoinDirector();
					for (int i = 0; i<numPartitions; i++){
						{
							// w[i]<-act_A(i, nodes[i], colors[i], edge_sources[i], edge_destinations[i])
							{
								Object _arguments[] = { i, nodes[i], colors[i], edge_sources[i], edge_destinations[i] };
								Message message = new Message( self, w[i], "act_A", _arguments, null, token_3_0 );
								__messages.add( message );
							}
						}
					}
					addJoinToken(token_3_0);
					// processA(token, path_a)
					{
						Object _arguments[] = { token_3_0, path_a };
						Message message = new Message( self, self, "processA", _arguments, token_3_0, null );
						__messages.add( message );
					}
				}
				{
					Token token_3_0 = new Token();
					// join block
					token_3_0.setJoinDirector();
					for (int i = 0; i<numPartitions; i++){
						{
							Token token_5_0 = new Token();
							// w[i]<-receiveWorkers(w)
							{
								Object _arguments[] = { w };
								Message message = new Message( self, w[i], "receiveWorkers", _arguments, null, token_5_0 );
								__messages.add( message );
							}
							// w[i]<-act_B()
							{
								Object _arguments[] = {  };
								Message message = new Message( self, w[i], "act_B", _arguments, token_5_0, token_3_0 );
								__messages.add( message );
							}
						}
					}
					addJoinToken(token_3_0);
					// processB(token, path_b)
					{
						Object _arguments[] = { token_3_0, path_b };
						Message message = new Message( self, self, "processB", _arguments, token_3_0, null );
						__messages.add( message );
					}
				}
			}
			catch (IOException e) {
				{
					// standardOutput<-printf("IOException : %s\n", e.getMessage())
					{
						Object _arguments[] = { "IOException : %s\n", e.getMessage() };
						Message message = new Message( self, standardOutput, "printf", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

		}
		public void processB(Object[] data, String path) {
			String out = "";
			Integer maxDegree = 0;
			ArrayList_I maxDegreeNodes = new ArrayList_I();
			for (int i = 0; i<data.length; i++){
				Object[][] arr = (Object[][])data[i];
				Integer cur_maxDegree = (Integer)arr[1][0];
				if (cur_maxDegree>maxDegree) {{
					maxDegree = cur_maxDegree;
				}
}			}
			for (int i = 0; i<data.length; i++){
				Object[][] arr = (Object[][])data[i];
				Integer cur_maxDegree = (Integer)arr[1][0];
				for (int j = 0; j<arr[0].length; j++){
					if (!maxDegreeNodes.list.contains((Integer)arr[0][j])) {{
						maxDegreeNodes.list.add((Integer)arr[0][j]);
					}
}				}
				ArrayList_I cur_maxDegreeNodes = new ArrayList_I((Integer[])arr[0]);
				cur_maxDegreeNodes.list.sort(Comparator.naturalOrder());
				out += "Partition "+i+": "+helper.printArr(cur_maxDegreeNodes.list.toArray())+"\n";
			}
			maxDegreeNodes.list.sort(Comparator.naturalOrder());
			out += "G: "+helper.printArr(maxDegreeNodes.list.toArray())+"\n";
			try {
				FileWriter fw = new FileWriter(path);
				fw.write(out);
				fw.close();
			}
			catch (IOException ex) {
				{
					// standardOutput<-printf("IOException : %s\n", ex.getMessage())
					{
						Object _arguments[] = { "IOException : %s\n", ex.getMessage() };
						Message message = new Message( self, standardOutput, "printf", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

		}
		public void processA(Object[] data, String path) {
			ArrayList_S totalUniqueColors = new ArrayList_S();
			ArrayList_I totalUniqueColorsCount = new ArrayList_I();
			ArrayList_I totalUniqueColorsDegrees = new ArrayList_I();
			for (int i = 0; i<data.length; i++){
				Object[][] arr = (Object[][])data[i];
				String[] cur_uniqueColors = (String[])arr[0];
				Integer[] cur_uniqueColorsCount = (Integer[])arr[1];
				Integer[] cur_uniqueColorsDegrees = (Integer[])arr[2];
				for (int j = 0; j<cur_uniqueColors.length; j++){
					if (!totalUniqueColors.list.contains((String)cur_uniqueColors[j])) {{
						totalUniqueColors.list.add((String)cur_uniqueColors[j]);
						totalUniqueColorsCount.list.add((Integer)cur_uniqueColorsCount[j]);
						totalUniqueColorsDegrees.list.add((Integer)cur_uniqueColorsDegrees[j]);
					}
}					else {{
						Integer index = helper.findIndex(totalUniqueColors.list.toArray(), (String)cur_uniqueColors[j]);
						totalUniqueColorsCount.list.set(index, totalUniqueColorsCount.list.get(index)+(Integer)cur_uniqueColorsCount[j]);
						totalUniqueColorsDegrees.list.set(index, totalUniqueColorsDegrees.list.get(index)+(Integer)cur_uniqueColorsDegrees[j]);
					}
}				}
			}
			String out = "";
			for (int i = 0; i<totalUniqueColors.list.size(); i++){
				out += totalUniqueColors.list.get(i)+" "+totalUniqueColorsCount.list.get(i)+" "+totalUniqueColorsDegrees.list.get(i)+"\n";
			}
			try {
				FileWriter fw = new FileWriter(path);
				fw.write(out);
				fw.close();
			}
			catch (IOException ex) {
				{
					// standardOutput<-printf("IOException : %s\n", ex.getMessage())
					{
						Object _arguments[] = { "IOException : %s\n", ex.getMessage() };
						Message message = new Message( self, standardOutput, "printf", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

		}
		public int countPartitions(String path) {
			int count = 0;
			try {
				BufferedReader in = new BufferedReader(new FileReader(path));
				while (in.ready()) {
					for (int i = 0; i<4; i++){
						in.readLine();
					}
					count++;
				}
				in.close();
			}
			catch (IOException e) {
				{
					// standardOutput<-printf("IOException : %s\n", e.getMessage())
					{
						Object _arguments[] = { "IOException : %s\n", e.getMessage() };
						Message message = new Message( self, standardOutput, "printf", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

			return count;
		}
	}
}